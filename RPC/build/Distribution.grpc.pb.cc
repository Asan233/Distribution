// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Distribution.proto

#include "Distribution.pb.h"
#include "Distribution.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Distribution {

static const char* RemoteService_method_names[] = {
  "/Distribution.RemoteService/GetRemoteJson",
  "/Distribution.RemoteService/DeleteRemoteJson",
  "/Distribution.RemoteService/PostRemoteJson",
};

std::unique_ptr< RemoteService::Stub> RemoteService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteService::Stub> stub(new RemoteService::Stub(channel));
  return stub;
}

RemoteService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRemoteJson_(RemoteService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRemoteJson_(RemoteService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostRemoteJson_(RemoteService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RemoteService::Stub::GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::Distribution::JString* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRemoteJson_, context, request, response);
}

void RemoteService::Stub::experimental_async::GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteJson_, context, request, response, std::move(f));
}

void RemoteService::Stub::experimental_async::GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRemoteJson_, context, request, response, std::move(f));
}

void RemoteService::Stub::experimental_async::GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteJson_, context, request, response, reactor);
}

void RemoteService::Stub::experimental_async::GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRemoteJson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Distribution::JString>* RemoteService::Stub::AsyncGetRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Distribution::JString>::Create(channel_.get(), cq, rpcmethod_GetRemoteJson_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Distribution::JString>* RemoteService::Stub::PrepareAsyncGetRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Distribution::JString>::Create(channel_.get(), cq, rpcmethod_GetRemoteJson_, context, request, false);
}

::grpc::Status RemoteService::Stub::DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::Distribution::JReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRemoteJson_, context, request, response);
}

void RemoteService::Stub::experimental_async::DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoteJson_, context, request, response, std::move(f));
}

void RemoteService::Stub::experimental_async::DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoteJson_, context, request, response, std::move(f));
}

void RemoteService::Stub::experimental_async::DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoteJson_, context, request, response, reactor);
}

void RemoteService::Stub::experimental_async::DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRemoteJson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Distribution::JReply>* RemoteService::Stub::AsyncDeleteRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Distribution::JReply>::Create(channel_.get(), cq, rpcmethod_DeleteRemoteJson_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Distribution::JReply>* RemoteService::Stub::PrepareAsyncDeleteRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Distribution::JReply>::Create(channel_.get(), cq, rpcmethod_DeleteRemoteJson_, context, request, false);
}

::grpc::Status RemoteService::Stub::PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::Distribution::JString* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostRemoteJson_, context, request, response);
}

void RemoteService::Stub::experimental_async::PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostRemoteJson_, context, request, response, std::move(f));
}

void RemoteService::Stub::experimental_async::PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostRemoteJson_, context, request, response, std::move(f));
}

void RemoteService::Stub::experimental_async::PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostRemoteJson_, context, request, response, reactor);
}

void RemoteService::Stub::experimental_async::PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostRemoteJson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Distribution::JString>* RemoteService::Stub::AsyncPostRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Distribution::JString>::Create(channel_.get(), cq, rpcmethod_PostRemoteJson_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Distribution::JString>* RemoteService::Stub::PrepareAsyncPostRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Distribution::JString>::Create(channel_.get(), cq, rpcmethod_PostRemoteJson_, context, request, false);
}

RemoteService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteService::Service, ::Distribution::JMessage, ::Distribution::JString>(
          std::mem_fn(&RemoteService::Service::GetRemoteJson), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteService::Service, ::Distribution::JMessage, ::Distribution::JReply>(
          std::mem_fn(&RemoteService::Service::DeleteRemoteJson), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteService::Service, ::Distribution::Jsonfomt, ::Distribution::JString>(
          std::mem_fn(&RemoteService::Service::PostRemoteJson), this)));
}

RemoteService::Service::~Service() {
}

::grpc::Status RemoteService::Service::GetRemoteJson(::grpc::ServerContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteService::Service::DeleteRemoteJson(::grpc::ServerContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteService::Service::PostRemoteJson(::grpc::ServerContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Distribution

