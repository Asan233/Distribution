// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Distribution.proto
#ifndef GRPC_Distribution_2eproto__INCLUDED
#define GRPC_Distribution_2eproto__INCLUDED

#include "Distribution.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Distribution {

// Define Server
class RemoteService final {
 public:
  static constexpr char const* service_full_name() {
    return "Distribution.RemoteService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get Remote Service Json
    virtual ::grpc::Status GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::Distribution::JString* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>> AsyncGetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>>(AsyncGetRemoteJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>> PrepareAsyncGetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>>(PrepareAsyncGetRemoteJsonRaw(context, request, cq));
    }
    // Delete Remote Service Json
    virtual ::grpc::Status DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::Distribution::JReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JReply>> AsyncDeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JReply>>(AsyncDeleteRemoteJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JReply>> PrepareAsyncDeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JReply>>(PrepareAsyncDeleteRemoteJsonRaw(context, request, cq));
    }
    // post Json
    virtual ::grpc::Status PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::Distribution::JString* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>> AsyncPostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>>(AsyncPostRemoteJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>> PrepareAsyncPostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>>(PrepareAsyncPostRemoteJsonRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Get Remote Service Json
      virtual void GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete Remote Service Json
      virtual void DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // post Json
      virtual void PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>* AsyncGetRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>* PrepareAsyncGetRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JReply>* AsyncDeleteRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JReply>* PrepareAsyncDeleteRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>* AsyncPostRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Distribution::JString>* PrepareAsyncPostRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::Distribution::JString* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>> AsyncGetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>>(AsyncGetRemoteJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>> PrepareAsyncGetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>>(PrepareAsyncGetRemoteJsonRaw(context, request, cq));
    }
    ::grpc::Status DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::Distribution::JReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JReply>> AsyncDeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JReply>>(AsyncDeleteRemoteJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JReply>> PrepareAsyncDeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JReply>>(PrepareAsyncDeleteRemoteJsonRaw(context, request, cq));
    }
    ::grpc::Status PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::Distribution::JString* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>> AsyncPostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>>(AsyncPostRemoteJsonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>> PrepareAsyncPostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Distribution::JString>>(PrepareAsyncPostRemoteJsonRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) override;
      void GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRemoteJson(::grpc::ClientContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) override;
      void PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PostRemoteJson(::grpc::ClientContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PostRemoteJson(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Distribution::JString* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Distribution::JString>* AsyncGetRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Distribution::JString>* PrepareAsyncGetRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Distribution::JReply>* AsyncDeleteRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Distribution::JReply>* PrepareAsyncDeleteRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::JMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Distribution::JString>* AsyncPostRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Distribution::JString>* PrepareAsyncPostRemoteJsonRaw(::grpc::ClientContext* context, const ::Distribution::Jsonfomt& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRemoteJson_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRemoteJson_;
    const ::grpc::internal::RpcMethod rpcmethod_PostRemoteJson_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get Remote Service Json
    virtual ::grpc::Status GetRemoteJson(::grpc::ServerContext* context, const ::Distribution::JMessage* request, ::Distribution::JString* response);
    // Delete Remote Service Json
    virtual ::grpc::Status DeleteRemoteJson(::grpc::ServerContext* context, const ::Distribution::JMessage* request, ::Distribution::JReply* response);
    // post Json
    virtual ::grpc::Status PostRemoteJson(::grpc::ServerContext* context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRemoteJson() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteJson(::grpc::ServerContext* context, ::Distribution::JMessage* request, ::grpc::ServerAsyncResponseWriter< ::Distribution::JString>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRemoteJson() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRemoteJson(::grpc::ServerContext* context, ::Distribution::JMessage* request, ::grpc::ServerAsyncResponseWriter< ::Distribution::JReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostRemoteJson() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PostRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostRemoteJson(::grpc::ServerContext* context, ::Distribution::Jsonfomt* request, ::grpc::ServerAsyncResponseWriter< ::Distribution::JString>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRemoteJson<WithAsyncMethod_DeleteRemoteJson<WithAsyncMethod_PostRemoteJson<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRemoteJson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Distribution::JMessage, ::Distribution::JString>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Distribution::JMessage* request, ::Distribution::JString* response) { return this->GetRemoteJson(context, request, response); }));}
    void SetMessageAllocatorFor_GetRemoteJson(
        ::grpc::experimental::MessageAllocator< ::Distribution::JMessage, ::Distribution::JString>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Distribution::JMessage, ::Distribution::JString>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRemoteJson(
      ::grpc::CallbackServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRemoteJson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRemoteJson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Distribution::JMessage, ::Distribution::JReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Distribution::JMessage* request, ::Distribution::JReply* response) { return this->DeleteRemoteJson(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRemoteJson(
        ::grpc::experimental::MessageAllocator< ::Distribution::JMessage, ::Distribution::JReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Distribution::JMessage, ::Distribution::JReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRemoteJson(
      ::grpc::CallbackServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRemoteJson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PostRemoteJson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Distribution::Jsonfomt, ::Distribution::JString>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Distribution::Jsonfomt* request, ::Distribution::JString* response) { return this->PostRemoteJson(context, request, response); }));}
    void SetMessageAllocatorFor_PostRemoteJson(
        ::grpc::experimental::MessageAllocator< ::Distribution::Jsonfomt, ::Distribution::JString>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Distribution::Jsonfomt, ::Distribution::JString>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PostRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PostRemoteJson(
      ::grpc::CallbackServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PostRemoteJson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetRemoteJson<ExperimentalWithCallbackMethod_DeleteRemoteJson<ExperimentalWithCallbackMethod_PostRemoteJson<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetRemoteJson<ExperimentalWithCallbackMethod_DeleteRemoteJson<ExperimentalWithCallbackMethod_PostRemoteJson<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRemoteJson() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRemoteJson() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostRemoteJson() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PostRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRemoteJson() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteJson(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRemoteJson() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRemoteJson(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostRemoteJson() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PostRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostRemoteJson(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRemoteJson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRemoteJson(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRemoteJson(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRemoteJson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRemoteJson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRemoteJson(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRemoteJson(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRemoteJson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PostRemoteJson() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostRemoteJson(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PostRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PostRemoteJson(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PostRemoteJson(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRemoteJson() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Distribution::JMessage, ::Distribution::JString>(std::bind(&WithStreamedUnaryMethod_GetRemoteJson<BaseClass>::StreamedGetRemoteJson, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRemoteJson(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Distribution::JMessage,::Distribution::JString>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRemoteJson() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Distribution::JMessage, ::Distribution::JReply>(std::bind(&WithStreamedUnaryMethod_DeleteRemoteJson<BaseClass>::StreamedDeleteRemoteJson, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::JMessage* /*request*/, ::Distribution::JReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRemoteJson(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Distribution::JMessage,::Distribution::JReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostRemoteJson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostRemoteJson() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Distribution::Jsonfomt, ::Distribution::JString>(std::bind(&WithStreamedUnaryMethod_PostRemoteJson<BaseClass>::StreamedPostRemoteJson, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostRemoteJson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostRemoteJson(::grpc::ServerContext* /*context*/, const ::Distribution::Jsonfomt* /*request*/, ::Distribution::JString* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostRemoteJson(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Distribution::Jsonfomt,::Distribution::JString>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRemoteJson<WithStreamedUnaryMethod_DeleteRemoteJson<WithStreamedUnaryMethod_PostRemoteJson<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRemoteJson<WithStreamedUnaryMethod_DeleteRemoteJson<WithStreamedUnaryMethod_PostRemoteJson<Service > > > StreamedService;
};

}  // namespace Distribution


#endif  // GRPC_Distribution_2eproto__INCLUDED
